// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: auth/auth.proto

package authrpc1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthTokens_GetTokens_FullMethodName  = "/auth.AuthTokens/GetTokens"
	AuthTokens_CheckToken_FullMethodName = "/auth.AuthTokens/CheckToken"
	AuthTokens_Refresh_FullMethodName    = "/auth.AuthTokens/Refresh"
	AuthTokens_GetInfo_FullMethodName    = "/auth.AuthTokens/GetInfo"
)

// AuthTokensClient is the client API for AuthTokens service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthTokensClient interface {
	GetTokens(ctx context.Context, in *GetTokensRequest, opts ...grpc.CallOption) (*GetTokensResponse, error)
	CheckToken(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*Message, error)
	Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error)
	GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error)
}

type authTokensClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthTokensClient(cc grpc.ClientConnInterface) AuthTokensClient {
	return &authTokensClient{cc}
}

func (c *authTokensClient) GetTokens(ctx context.Context, in *GetTokensRequest, opts ...grpc.CallOption) (*GetTokensResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTokensResponse)
	err := c.cc.Invoke(ctx, AuthTokens_GetTokens_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authTokensClient) CheckToken(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, AuthTokens_CheckToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authTokensClient) Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshResponse)
	err := c.cc.Invoke(ctx, AuthTokens_Refresh_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authTokensClient) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInfoResponse)
	err := c.cc.Invoke(ctx, AuthTokens_GetInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthTokensServer is the server API for AuthTokens service.
// All implementations must embed UnimplementedAuthTokensServer
// for forward compatibility.
type AuthTokensServer interface {
	GetTokens(context.Context, *GetTokensRequest) (*GetTokensResponse, error)
	CheckToken(context.Context, *CheckTokenRequest) (*Message, error)
	Refresh(context.Context, *RefreshRequest) (*RefreshResponse, error)
	GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error)
	mustEmbedUnimplementedAuthTokensServer()
}

// UnimplementedAuthTokensServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthTokensServer struct{}

func (UnimplementedAuthTokensServer) GetTokens(context.Context, *GetTokensRequest) (*GetTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokens not implemented")
}
func (UnimplementedAuthTokensServer) CheckToken(context.Context, *CheckTokenRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckToken not implemented")
}
func (UnimplementedAuthTokensServer) Refresh(context.Context, *RefreshRequest) (*RefreshResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (UnimplementedAuthTokensServer) GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedAuthTokensServer) mustEmbedUnimplementedAuthTokensServer() {}
func (UnimplementedAuthTokensServer) testEmbeddedByValue()                    {}

// UnsafeAuthTokensServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthTokensServer will
// result in compilation errors.
type UnsafeAuthTokensServer interface {
	mustEmbedUnimplementedAuthTokensServer()
}

func RegisterAuthTokensServer(s grpc.ServiceRegistrar, srv AuthTokensServer) {
	// If the following call pancis, it indicates UnimplementedAuthTokensServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthTokens_ServiceDesc, srv)
}

func _AuthTokens_GetTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthTokensServer).GetTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthTokens_GetTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthTokensServer).GetTokens(ctx, req.(*GetTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthTokens_CheckToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthTokensServer).CheckToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthTokens_CheckToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthTokensServer).CheckToken(ctx, req.(*CheckTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthTokens_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthTokensServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthTokens_Refresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthTokensServer).Refresh(ctx, req.(*RefreshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthTokens_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthTokensServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthTokens_GetInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthTokensServer).GetInfo(ctx, req.(*GetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthTokens_ServiceDesc is the grpc.ServiceDesc for AuthTokens service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthTokens_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthTokens",
	HandlerType: (*AuthTokensServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTokens",
			Handler:    _AuthTokens_GetTokens_Handler,
		},
		{
			MethodName: "CheckToken",
			Handler:    _AuthTokens_CheckToken_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _AuthTokens_Refresh_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _AuthTokens_GetInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth/auth.proto",
}

const (
	AuthUsers_CreateUser_FullMethodName = "/auth.AuthUsers/CreateUser"
	AuthUsers_UpdateUser_FullMethodName = "/auth.AuthUsers/UpdateUser"
	AuthUsers_DeleteUser_FullMethodName = "/auth.AuthUsers/DeleteUser"
	AuthUsers_HaveUser_FullMethodName   = "/auth.AuthUsers/HaveUser"
)

// AuthUsersClient is the client API for AuthUsers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthUsersClient interface {
	CreateUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Message, error)
	UpdateUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Message, error)
	DeleteUser(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Message, error)
	HaveUser(ctx context.Context, in *LoginEmailRequest, opts ...grpc.CallOption) (*Message, error)
}

type authUsersClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthUsersClient(cc grpc.ClientConnInterface) AuthUsersClient {
	return &authUsersClient{cc}
}

func (c *authUsersClient) CreateUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, AuthUsers_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authUsersClient) UpdateUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, AuthUsers_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authUsersClient) DeleteUser(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, AuthUsers_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authUsersClient) HaveUser(ctx context.Context, in *LoginEmailRequest, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, AuthUsers_HaveUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthUsersServer is the server API for AuthUsers service.
// All implementations must embed UnimplementedAuthUsersServer
// for forward compatibility.
type AuthUsersServer interface {
	CreateUser(context.Context, *UserRequest) (*Message, error)
	UpdateUser(context.Context, *UserRequest) (*Message, error)
	DeleteUser(context.Context, *LoginRequest) (*Message, error)
	HaveUser(context.Context, *LoginEmailRequest) (*Message, error)
	mustEmbedUnimplementedAuthUsersServer()
}

// UnimplementedAuthUsersServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthUsersServer struct{}

func (UnimplementedAuthUsersServer) CreateUser(context.Context, *UserRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedAuthUsersServer) UpdateUser(context.Context, *UserRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedAuthUsersServer) DeleteUser(context.Context, *LoginRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedAuthUsersServer) HaveUser(context.Context, *LoginEmailRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HaveUser not implemented")
}
func (UnimplementedAuthUsersServer) mustEmbedUnimplementedAuthUsersServer() {}
func (UnimplementedAuthUsersServer) testEmbeddedByValue()                   {}

// UnsafeAuthUsersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthUsersServer will
// result in compilation errors.
type UnsafeAuthUsersServer interface {
	mustEmbedUnimplementedAuthUsersServer()
}

func RegisterAuthUsersServer(s grpc.ServiceRegistrar, srv AuthUsersServer) {
	// If the following call pancis, it indicates UnimplementedAuthUsersServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthUsers_ServiceDesc, srv)
}

func _AuthUsers_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthUsersServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthUsers_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthUsersServer).CreateUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthUsers_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthUsersServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthUsers_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthUsersServer).UpdateUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthUsers_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthUsersServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthUsers_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthUsersServer).DeleteUser(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthUsers_HaveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthUsersServer).HaveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthUsers_HaveUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthUsersServer).HaveUser(ctx, req.(*LoginEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthUsers_ServiceDesc is the grpc.ServiceDesc for AuthUsers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthUsers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthUsers",
	HandlerType: (*AuthUsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _AuthUsers_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _AuthUsers_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _AuthUsers_DeleteUser_Handler,
		},
		{
			MethodName: "HaveUser",
			Handler:    _AuthUsers_HaveUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth/auth.proto",
}

const (
	AuthData_Authentication_FullMethodName = "/auth.AuthData/Authentication"
	AuthData_ValidateData_FullMethodName   = "/auth.AuthData/ValidateData"
)

// AuthDataClient is the client API for AuthData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthDataClient interface {
	Authentication(ctx context.Context, in *AuthenticationRequest, opts ...grpc.CallOption) (*Message, error)
	ValidateData(ctx context.Context, in *RegDataRequest, opts ...grpc.CallOption) (*Message, error)
}

type authDataClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthDataClient(cc grpc.ClientConnInterface) AuthDataClient {
	return &authDataClient{cc}
}

func (c *authDataClient) Authentication(ctx context.Context, in *AuthenticationRequest, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, AuthData_Authentication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authDataClient) ValidateData(ctx context.Context, in *RegDataRequest, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, AuthData_ValidateData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthDataServer is the server API for AuthData service.
// All implementations must embed UnimplementedAuthDataServer
// for forward compatibility.
type AuthDataServer interface {
	Authentication(context.Context, *AuthenticationRequest) (*Message, error)
	ValidateData(context.Context, *RegDataRequest) (*Message, error)
	mustEmbedUnimplementedAuthDataServer()
}

// UnimplementedAuthDataServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthDataServer struct{}

func (UnimplementedAuthDataServer) Authentication(context.Context, *AuthenticationRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authentication not implemented")
}
func (UnimplementedAuthDataServer) ValidateData(context.Context, *RegDataRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateData not implemented")
}
func (UnimplementedAuthDataServer) mustEmbedUnimplementedAuthDataServer() {}
func (UnimplementedAuthDataServer) testEmbeddedByValue()                  {}

// UnsafeAuthDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthDataServer will
// result in compilation errors.
type UnsafeAuthDataServer interface {
	mustEmbedUnimplementedAuthDataServer()
}

func RegisterAuthDataServer(s grpc.ServiceRegistrar, srv AuthDataServer) {
	// If the following call pancis, it indicates UnimplementedAuthDataServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthData_ServiceDesc, srv)
}

func _AuthData_Authentication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthDataServer).Authentication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthData_Authentication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthDataServer).Authentication(ctx, req.(*AuthenticationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthData_ValidateData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthDataServer).ValidateData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthData_ValidateData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthDataServer).ValidateData(ctx, req.(*RegDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthData_ServiceDesc is the grpc.ServiceDesc for AuthData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthData",
	HandlerType: (*AuthDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authentication",
			Handler:    _AuthData_Authentication_Handler,
		},
		{
			MethodName: "ValidateData",
			Handler:    _AuthData_ValidateData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth/auth.proto",
}
